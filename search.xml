<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客问题整理</title>
      <link href="/2019/08/31/hexo-bo-ke-wen-ti-zheng-li/"/>
      <url>/2019/08/31/hexo-bo-ke-wen-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=476223850&auto=1&height=66"></iframe></div><hr><h3 id="hexo-YAMLException"><a href="#hexo-YAMLException" class="headerlink" title="hexo YAMLException"></a>hexo YAMLException</h3><p>Q1：hexo YAMLException: cannot read a block mapping entry; a multi line key may not be an implicit key<br><img src="/2019/08/31/hexo-bo-ke-wen-ti-zheng-li/1.png" alt><br>A-&gt; tags:<br>    categories:<br>    冒号后边要留个空格</p><h3 id="轮播图无效"><a href="#轮播图无效" class="headerlink" title="轮播图无效"></a>轮播图无效</h3><p>A-&gt;</p><h3 id="site-map问题"><a href="#site-map问题" class="headerlink" title="site-map问题"></a>site-map问题</h3><p>Q2：谷歌站点地图sitemap无法获取<br>A-&gt;</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在本地查看GitBook电子书</title>
      <link href="/2019/08/31/ru-he-zai-ben-di-cha-kan-gitbook-dian-zi-shu/"/>
      <url>/2019/08/31/ru-he-zai-ben-di-cha-kan-gitbook-dian-zi-shu/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1375469494&auto=1&height=66"></iframe></div><hr><p>主要流程：<strong>首先安装gitbook（已安装过的可以跳过），创建存放书籍的目录,然后对该目录进行初始化,最后启动本地服务即可体验效果。</strong></p><h2 id="安装gitbook"><a href="#安装gitbook" class="headerlink" title="安装gitbook"></a>安装gitbook</h2><p>安装GitBook简单明了。您的系统只需满足以下两个要求：</p><p>NodeJS（推荐v4.0.0及以上版本）<br>Windows，Linux，Unix或Mac OS X.</p><h4 id="使用NPM安装"><a href="#使用NPM安装" class="headerlink" title="使用NPM安装"></a>使用NPM安装</h4><p>安装GitBook的最佳方法是通过NPM。在终端提示符下，只需运行以下命令即可安装GitBook：</p><pre><code>$ npm install gitbook-cli -g</code></pre><p>gitbook-cli是一个在同一系统上安装和使用多个版本的GitBook的实用程序。它将自动安装所需版本的GitBook来构建一本书。</p><h4 id="创建一本电子书"><a href="#创建一本电子书" class="headerlink" title="创建一本电子书"></a>创建一本电子书</h4><p>GitBook可以设置样板书：</p><pre><code>$ gitbook init</code></pre><p>如果您希望将书籍创建到新目录中，可以通过运行gitbook init ./directory来完成</p><h4 id="使用以下方式预览和提供您的书"><a href="#使用以下方式预览和提供您的书" class="headerlink" title="使用以下方式预览和提供您的书"></a>使用以下方式预览和提供您的书</h4><pre><code>$  gitbook服务</code></pre><h4 id="或使用以下方法构建静态网站"><a href="#或使用以下方法构建静态网站" class="headerlink" title="或使用以下方法构建静态网站"></a>或使用以下方法构建静态网站</h4><pre><code>$ gitbook build</code></pre><h4 id="安装预发布版"><a href="#安装预发布版" class="headerlink" title="安装预发布版"></a>安装预发布版</h4><p>gitbook-cli使您可以轻松下载并安装其他版本的GitBook来测试您的书籍：</p><pre><code>$ gitbook fetch beta</code></pre><p>使用gitbook ls-remote列出可供安装的远程版本。</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>您可以使用选项–log = debug和–debug来获得更好的错误消息（使用堆栈跟踪）。例如：</p><pre><code>$ gitbook build ./ --log = debug --debug</code></pre><h2 id="下载电子书源代码并在本地查看"><a href="#下载电子书源代码并在本地查看" class="headerlink" title="下载电子书源代码并在本地查看"></a>下载电子书源代码并在本地查看</h2><h4 id="下载电子书"><a href="#下载电子书" class="headerlink" title="下载电子书"></a>下载电子书</h4><pre><code>git clone git@github.com:xxxxxx.xxxxx.git</code></pre><p>例如：<br>    git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:songjiayang/go-basic-courses.git</p><h4 id="运行gitbook服务"><a href="#运行gitbook服务" class="headerlink" title="运行gitbook服务"></a>运行gitbook服务</h4><pre><code>cd go-basic-coursesgitbook serve</code></pre><p>打开浏览器，访问<a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a> 即可。</p><hr><p>如果浏览器无法访问，可能是4000端口被占用，遇到这个问题怎么办呢？<br><strong>解决思路</strong>有两个：</p><ol><li>修改http-server服务器端口号；<br>查阅文档命令行直接输入：<br><code>http-server -p 6666</code><br>好的，http-server不能启动的问题解决了</li><li>我想查看8080端口被谁占用了。<h2 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h2>如何查看linux端口号情况？emmmm虽然我用的是mac，系统都差不多<br>使用netstat命令。netstat命令可以显示网络连接，路由表，接口状态，伪装连接，网络链路信息和组播成员组等信息。<br>命令格式：netstat [选项]<h5 id="列出所有端口"><a href="#列出所有端口" class="headerlink" title="列出所有端口"></a>列出所有端口</h5> netstat <h5 id="列出所有-tcp-端口"><a href="#列出所有-tcp-端口" class="headerlink" title="列出所有 tcp 端口"></a>列出所有 tcp 端口</h5> netstat -at<h4 id="显示网络接口列表"><a href="#显示网络接口列表" class="headerlink" title="显示网络接口列表"></a>显示网络接口列表</h4> netstat -i<h4 id="显示网络工作信息统计表"><a href="#显示网络工作信息统计表" class="headerlink" title="显示网络工作信息统计表"></a>显示网络工作信息统计表</h4> netstat -s<h4 id="显示伪装的网络连线"><a href="#显示伪装的网络连线" class="headerlink" title="显示伪装的网络连线"></a>显示伪装的网络连线</h4> netstat -m<h4 id="显示核心路由信息"><a href="#显示核心路由信息" class="headerlink" title="显示核心路由信息"></a>显示核心路由信息</h4> netstat -r<h4 id="显示合并的信息"><a href="#显示合并的信息" class="headerlink" title="显示合并的信息"></a>显示合并的信息</h4> netstat -rs<br> routing:<pre><code> 0 bad routing redirects 0 dynamically created routes 0 new gateways due to redirects 4294944612 destinations found unreachable 0 uses of a wildcard route 8 routes not in table but not freed</code></pre></li></ol><h2 id="查看某一端口占用情况"><a href="#查看某一端口占用情况" class="headerlink" title="查看某一端口占用情况"></a>查看某一端口占用情况</h2><p>命令格式：lsof -i :端口<br><code>lsof -i:8080</code></p><h2 id="如何杀掉进程"><a href="#如何杀掉进程" class="headerlink" title="如何杀掉进程"></a>如何杀掉进程</h2><p>查看进程，命令行输入：<br><code>ps -ef | more</code><br>找到需要杀掉的进程，执行：<br><code>kill -9 pid</code><br>某种情况下，我们也可以根据进程名称来杀进程，如下：<br><code>kill -9 name</code></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的使用</title>
      <link href="/2019/08/27/markdown-de-shi-yong/"/>
      <url>/2019/08/27/markdown-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=513218077&auto=1&height=66"></iframe></div><p>mac下关于Markdown语法的使用</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>加粗</td><td>command+B</td></tr><tr><td>斜体</td><td>command+I</td></tr><tr><td>引用</td><td>command+Q</td></tr><tr><td>插入链接</td><td>command+L</td></tr><tr><td>插入代码</td><td>command+K</td></tr><tr><td>插入图片</td><td>command+G</td></tr><tr><td>提升标题</td><td>command+H</td></tr><tr><td>有序列表</td><td>command+O</td></tr><tr><td>无序列表</td><td>command+U</td></tr><tr><td>横线</td><td>command+R</td></tr><tr><td>撤销</td><td>command+Z</td></tr><tr><td>重做</td><td>command+Y</td></tr></tbody></table><p>注：Windows下command改为Ctrl</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="字体设置斜体、粗体、删除线"><a href="#字体设置斜体、粗体、删除线" class="headerlink" title="字体设置斜体、粗体、删除线"></a>字体设置斜体、粗体、删除线</h2><p>正常文字<br><em>倾斜文字</em><br>_倾斜文字_<br><strong>加粗文字</strong><br><strong>加粗文字</strong><br><strong><em>倾斜加粗</em></strong><br><del>下划线</del></p><h2 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h2><p>写法1：<br>（# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题  这个写法和（<strong>文字</strong>）效果是一样的）<br>写法2：<br>（这是一个一级标题<br>============================）<br>或者<br>（二级标题- - - - - - - - - - - - - - ）</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>插入本地图片</p><p><img src="/2019/08/27/markdown-de-shi-yong/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84" alt="图片描述"><br>或<br><img src="/2019/08/27/markdown-de-shi-yong/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%22title%22" alt="图片描述"></p><p>注意：这个图片描述可以不写。</p><p>插入互联网图片</p><p><img src="https://xxx.xxx.xxxx.jpg" alt="图片描述"><br>自动连接</p><p>Markdown支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的 </p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>你可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 </p><hr><hr><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(tab), 另一种是利用英文“`”符号（一般在ESC键下方，和~同一个键）包裹代码。<br>（1）代码块：缩进 4 个空格或是 1 个制表符。效果如下</p><pre><code>#include&lt;studio.h&gt;int main(void) {    printf(&quot;hello world!&quot;);}</code></pre><p>（2）行内式：如果在一个行内需要引用代码，只要用反引号`引起来就好（一般在ESC键下方，和~同一个键）<br>这是一个示例：</p><p><code>printf(&quot;hello world&quot;)</code></p><p>（3）多行代码块与语法高亮：在需要高亮的代码块的前一行及后一行使用三个单反引号“`”包裹，就可以了。<br>示例如下： </p><pre><code>$(document).ready(function () {    alert(&#39;hello world!&#39;);});</code></pre><p>（4）代码块里面包含html代码<br>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>周一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>周二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>周三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>王五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：有的软件代码块里不支持html。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</p><p>（1）基本使用<br>连续引用与引用段落之间有空格的效果</p><blockquote><p>我一脚踏空我就要飞起来了<br>我向上是迷茫<br>我向下听见你说<br>这世界是空荡荡</p></blockquote><blockquote><p>你说一二三<br>打碎了过往消亡<br>有风吹破了的归途<br>你有没有看到我在唱</p></blockquote><blockquote><p>你说一二三转身<br>你听被抹掉的慌张</p></blockquote><blockquote><p>我想抬头暖阳春草<br>你给我简单拥抱</p></blockquote><blockquote><p>我想踩碎了迷茫走过时光<br>睁开眼你就会听到</p></blockquote><blockquote><p>我想左肩有你右肩微笑<br>我想在你眼里撒野奔跑</p></blockquote><blockquote><p>我想一个眼神就到老</p></blockquote><p>（2）引用的嵌套使用 </p><blockquote><blockquote><blockquote><p>引用1<br>引用2<br>引用3</p></blockquote></blockquote></blockquote><p>（3）引用其它要素<br>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。 </p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>（1）无序列表<br>使用 <em>，+，- 表示无序列表。<br>注意：<em>*符号后面一定要有一个空格</em></em>，起到缩进的作用。</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>（2）有序列表<br>使用数字和一个英文句点表示有序列表。<br>注意：<strong>英文句点后面一定要有一个空格</strong>，起到缩进的作用。 </p><ol><li>第一项</li><li>第二项</li><li>第三项</li><li>第四项</li></ol><p>（3）无序列表和有序列表同时使用 </p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第一个元素</li></ul></li></ol><p>（4）列表和其它要素混合使用<br>列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等。</p><p>（1）加粗效果不能直接用于列表标题里面，但是可以嵌套在列表里面混合使用。<br>（2）列表中包含代码块（前面加2个tab或者8个空格，并且需要空一行，否则不显示）。 </p><p>（5）注意事项<br>在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2019.8.27 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>name</th><th>价格</th><th>数量</th></tr></thead><tbody><tr><td>香蕉</td><td>$1</td><td>5</td></tr><tr><td>苹果</td><td>$1</td><td>6</td></tr><tr><td>草莓</td><td>$1</td><td>7</td></tr></tbody></table><p>表格对齐方式：我们可以指定表格单元格的对齐方式，冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p><h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签：</p><h2 id="缩进字符"><a href="#缩进字符" class="headerlink" title="缩进字符"></a>缩进字符</h2><p>tab键</p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><p>（1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p><h2 id="链接的高级操作"><a href="#链接的高级操作" class="headerlink" title="链接的高级操作"></a>链接的高级操作</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>上文已说过</p><h3 id="参考式链接"><a href="#参考式链接" class="headerlink" title="参考式链接"></a>参考式链接</h3><p>在文档要插入图片的地方写![图片或网址链接][标记]，在文档的最后写上[标记]:图片地址 “标题”。（最后这个”标题”可以不填写）</p><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 [TOC] 以显示全文内容的目录结构。</p><h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>语法说明：<br>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。举例如下：</p><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><h1 id="高端用法"><a href="#高端用法" class="headerlink" title="高端用法"></a>高端用法</h1><h2 id="LaTeX数学公式"><a href="#LaTeX数学公式" class="headerlink" title="LaTeX数学公式"></a>LaTeX数学公式</h2><p>使用LaTex数学公式</p><p>1.行内公式：使用两个”$”符号引用公式:</p><p>$公式$</p><p>2.行间公式：使用两对“$$”符号引用公式：</p><p>$$公式$$</p><p>输入$\sqrt{x^{2}}$ </p><p>具体可以参考 markdown编辑器使用LaTex数学公式（<a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Ftestcs_dn%2Farticle%2Fdetails%2F44229085）" target="_blank" rel="noopener">https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Ftestcs_dn%2Farticle%2Fdetails%2F44229085）</a></p><p>latex数学符号详见：常用数学符号的 LaTeX 表示方法</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo图片无法显示</title>
      <link href="/2019/08/27/jie-jue-hexo-tu-pian-wu-fa-xian-shi/"/>
      <url>/2019/08/27/jie-jue-hexo-tu-pian-wu-fa-xian-shi/</url>
      
        <content type="html"><![CDATA[<div align="middle"><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=445154138&auto=1&height=66"></iframe></div></div><h2 id="刚开始用hexo写Markdown文档，发现图片无法显示，解决方法"><a href="#刚开始用hexo写Markdown文档，发现图片无法显示，解决方法" class="headerlink" title="刚开始用hexo写Markdown文档，发现图片无法显示，解决方法"></a>刚开始用hexo写Markdown文档，发现图片无法显示，解决方法</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>首先确认站点_config.yml（hexo根目录下的那个） 中有 post_asset_folder: true。(空一格)</p><p>Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder</p><p>当你设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。</p><p>在hexo的目录下执行<br>‘npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save’<br>（需要等待一段时间）</p><p>在根目录下命令行执行hexo n “解决hexo图片无法显示”（新建”解决hexo图片无法显示”.md文档）<br><img src="/2019/08/27/jie-jue-hexo-tu-pian-wu-fa-xian-shi/1.png" alt><br>结果如图所示，即为成功</p><p>打开_posts目录会发现<br><img src="/2019/08/27/jie-jue-hexo-tu-pian-wu-fa-xian-shi/2.png" alt><br>在这个目录下存放图片就可以啦。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/2019/08/25/test/"/>
      <url>/2019/08/25/test/</url>
      
        <content type="html"><![CDATA[<div align="middle"><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=528284&auto=1&height=66"></iframe></div></div><h1 id="故事一"><a href="#故事一" class="headerlink" title="故事一"></a>故事一</h1><p>主人派遣仆人去买东西。<br>第一天，他要求的是“世界上最好的东西”，仆人买回来的是舌头。<br>第二天，他要求的是“世界上最坏的东西”，仆人买回来的还是舌头！<br><img src="/2019/08/25/test/33.jpg" alt><br>主人勃然大怒，生气地质问仆人：为什么耍他？<br>没想到仆人却解释道：</p><blockquote><p>世界上所谓的‘最好’和‘最坏’，全是凭借一张嘴编织出来的。<br>因此，它是世界上最好的东西，也是世界上最坏的东西。</p></blockquote><p>看完这个故事，你是否深有同感？<br>有句话说，你说出什么样的话，你就是什么样的命。<br>我们往往向外找寻自己的风水，殊不知，你的嘴，就是你的风水。<br>那些最好的命和最坏的命，其实都藏在嘴里。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协同过滤算法原理</title>
      <link href="/2019/08/24/xie-tong-guo-lu-tui-jian-suan-fa-de-yuan-li/"/>
      <url>/2019/08/24/xie-tong-guo-lu-tui-jian-suan-fa-de-yuan-li/</url>
      
        <content type="html"><![CDATA[<div align="middle"><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=528284&auto=1&height=66"></iframe></div></div><h1 id="协同过滤算法的原理及实现"><a href="#协同过滤算法的原理及实现" class="headerlink" title="协同过滤算法的原理及实现"></a>协同过滤算法的原理及实现</h1><p>　　推荐算法是诞生最早，并且较为著名的推荐算法。主要的功能是预测和推荐。算法通过对用户历史行为数据的挖掘发现用户的偏好，基于不同的偏好对用户进行群组划分并推荐品味相似的商品。协同过滤推荐算法分为两类，分别是基于用户的协同过滤算法(user-based collaboratIve filtering)，和基于物品的协同过滤算法(item-based collaborative filtering)。简单的说就是：人以类聚，物以群分。下面我们将分别说明这两类推荐算法的原理和实现方法。</p><p><img src="http://img.mp.itc.cn/upload/20160323/3016206affd84c1c93ebd01ec113c9a1.jpg" alt></p><h2 id="基于用户的协同过滤算法-user-based-collaboratIve-filtering"><a href="#基于用户的协同过滤算法-user-based-collaboratIve-filtering" class="headerlink" title="基于用户的协同过滤算法(user-based collaboratIve filtering)"></a>基于用户的协同过滤算法(user-based collaboratIve filtering)</h2><p>　　基于用户的协同过滤算法是通过用户的历史行为数据发现用户对商品或内容的喜欢(如商品购买，收藏，内容评论或分享)，并对这些喜好进行度量和打分。根据不同用户对相同商品或内容的态度和偏好程度计算用户之间的关系。在有相同喜好的用户间进行商品推荐。简单的说就是如果A,B两个用户都购买了x,y,z三本图书，并且给出了5星的好评。那么A和B就属于同一类用户。可以将A看过的图书w也推荐给用户B。<br><img src="http://img.mp.itc.cn/upload/20160323/8e613f8f202c4a82999ba32e3f52a002_th.jpg" alt></p><h3 id="寻找偏好相似的用户"><a href="#寻找偏好相似的用户" class="headerlink" title="寻找偏好相似的用户"></a>寻找偏好相似的用户</h3><p>　　我们模拟了5个用户对两件商品的评分，来说明如何通过用户对不同商品的态度和偏好寻找相似的用户。在示例中，5个用户分别对两件商品进行了评分。这里的分值可能表示真实的购买，也可以是用户对商品不同行为的量化指标。例如，浏览商品的次数，向朋友推荐商品，收藏，分享，或评论等等。这些行为都可以表示用户对商品的态度和偏好程度。<br><img src="http://img.mp.itc.cn/upload/20160323/4e070b6cc48246048f11dd45b151f88d.jpg" alt></p><p>　　从表格中很难直观发现5个用户间的联系，我们将5个用户对两件商品的评分用散点图表示出来后，用户间的关系就很容易发现了。在散点图中，Y轴是商品1的评分，X轴是商品2的评分，通过用户的分布情况可以发现，A,C,D三个用户距离较近。用户A(3.3 6.5)和用户C(3.6 6.3)，用户D(3.4 5.8)对两件商品的评分较为接近。而用户E和用户B则形成了另一个群体。<br><img src="http://img.mp.itc.cn/upload/20160323/cd7f6eb1de024677929bad67b0c837ec_th.jpg" alt></p><p>　　散点图虽然直观，但无法投入实际的应用，也不能准确的度量用户间的关系。因此我们需要通过数字对用户的关系进行准确的度量，并依据这些关系完成商品的推荐。</p><h4 id="欧几里德距离评价"><a href="#欧几里德距离评价" class="headerlink" title="欧几里德距离评价"></a>欧几里德距离评价</h4><p>　　欧几里德距离评价是一个较为简单的用户关系评价方法。原理是通过计算两个用户在散点图中的距离来判断不同的用户是否有相同的偏好。以下是欧几里德距离评价的计算公式。</p><p>　　通过公式我们获得了5个用户相互间的欧几里德系数，也就是用户间的距离。系数越小表示两个用户间的距离越近，偏好也越是接近。不过这里有个问题，太小的数值可能无法准确的表现出不同用户间距离的差异，因此我们对求得的系数取倒数，使用户间的距离约接近，数值越大。在下面的表格中，可以发现，用户A&amp;C用户A&amp;D和用户C&amp;D距离较近。同时用户B&amp;E的距离也较为接近。与我们前面在散点图中看到的情况一致。<br><img src="/2019/08/24/xie-tong-guo-lu-tui-jian-suan-fa-de-yuan-li/upload/20160323/5978f538574b47c7b45d7ba45ca547c5.jpg" alt></p><h4 id="皮尔逊相关度评价"><a href="#皮尔逊相关度评价" class="headerlink" title="皮尔逊相关度评价"></a>皮尔逊相关度评价</h4><p>　　皮尔逊相关度评价是另一种计算用户间关系的方法。他比欧几里德距离评价的计算要复杂一些，但对于评分数据不规范时皮尔逊相关度评价能够给出更好的结果。以下是一个多用户对多个商品进行评分的示例。这个示例比之前的两个商品的情况要复杂一些，但也更接近真实的情况。我们通过皮尔逊相关度评价对用户进行分组，并推荐商品。<br><img src="http://img.mp.itc.cn/upload/20160323/f1554aa4eac4468e8a78f0e0cf85f74f.jpg" alt></p><h4 id="皮尔逊相关系数"><a href="#皮尔逊相关系数" class="headerlink" title="皮尔逊相关系数"></a>皮尔逊相关系数</h4><p>　　皮尔逊相关系数的计算公式如下，结果是一个在-1与1之间的系数。该系数用来说明两个用户间联系的强弱程度。</p><pre><code>相关系数的分类&gt;0.8-1.0 极强相关&gt;0.6-0.8 强相关&gt;0.4-0.6 中等程度相关&gt;0.2-0.4 弱相关&gt;0.0-0.2 极弱相关或无相关</code></pre><p>　　通过计算5个用户对5件商品的评分我们获得了用户间的相似度数据。这里可以看到用户A&amp;B，C&amp;D，C&amp;E和D&amp;E之间相似度较高。下一步，我们可以依照相似度对用户进行商品推荐。<br><img src="http://img.mp.itc.cn/upload/20160323/d4c84a6b0e6a47c396be91178e7dbc87.jpg" alt></p><h3 id="为相似的用户提供推荐物品"><a href="#为相似的用户提供推荐物品" class="headerlink" title="为相似的用户提供推荐物品"></a>为相似的用户提供推荐物品</h3><h4 id="为用户C推荐商品"><a href="#为用户C推荐商品" class="headerlink" title="为用户C推荐商品"></a>为用户C推荐商品</h4><p>　　当我们需要对用户C推荐商品时，首先我们检查之前的相似度列表，发现用户C和用户D和E的相似度较高。换句话说这三个用户是一个群体，拥有相同的偏好。因此，我们可以对用户C推荐D和E的商品。但这里有一个问题。我们不能直接推荐前面商品1-商品5的商品。因为这这些商品用户C以及浏览或者购买过了。不能重复推荐。因此我们要推荐用户C还没有浏览或购买过的商品。</p><h4 id="加权排序推荐"><a href="#加权排序推荐" class="headerlink" title="加权排序推荐"></a>加权排序推荐</h4><p>　　我们提取了用户D和用户E评价过的另外5件商品A—商品F的商品。并对不同商品的评分进行相似度加权。按加权后的结果对5件商品进行排序，然后推荐给用户C。这样，用户C就获得了与他偏好相似的用户D和E评价的商品。而在具体的推荐顺序和展示上我们依照用户D和用户E与用户C的相似度进行排序。<br><img src="http://img.mp.itc.cn/upload/20160323/30c12e775fa04d868ecf537ff4f67ee3.jpg" alt></p><p>　　以上是基于用户的协同过滤算法。这个算法依靠用户的历史行为数据来计算相关度。也就是说必须要有一定的数据积累(冷启动问题)。对于新网站或数据量较少的网站，还有一种方法是基于物品的协同过滤算法。</p><h2 id="基于物品的协同过滤算法-item-based-collaborative-filtering"><a href="#基于物品的协同过滤算法-item-based-collaborative-filtering" class="headerlink" title="基于物品的协同过滤算法(item-based collaborative filtering)"></a>基于物品的协同过滤算法(item-based collaborative filtering)</h2><p>　　基于物品的协同过滤算法与基于用户的协同过滤算法很像，将商品和用户互换。通过计算不同用户对不同物品的评分获得物品间的关系。基于物品间的关系对用户进行相似物品的推荐。这里的评分代表用户对商品的态度和偏好。简单来说就是如果用户A同时购买了商品1和商品2，那么说明商品1和商品2的相关度较高。当用户B也购买了商品1时，可以推断他也有购买商品2的需求。<br><img src="http://img.mp.itc.cn/upload/20160323/0912bec1a54a47ad868f54841b500eed_th.jpg" alt></p><h3 id="寻找相似的物品"><a href="#寻找相似的物品" class="headerlink" title="寻找相似的物品"></a>寻找相似的物品</h3><p>　　表格中是两个用户对5件商品的评分。在这个表格中我们用户和商品的位置进行了互换，通过两个用户的评分来获得5件商品之间的相似度情况。单从表格中我们依然很难发现其中的联系，因此我们选择通过散点图进行展示。<br><img src="http://img.mp.itc.cn/upload/20160323/bb5cda6fd4f34ef6aa6975ad97949633.jpg" alt></p><p>　　在散点图中，X轴和Y轴分别是两个用户的评分。5件商品按照所获的评分值分布在散点图中。我们可以发现，商品1,3,4在用户A和B中有着近似的评分，说明这三件商品的相关度较高。而商品5和2则在另一个群体中。<br><img src="http://img.mp.itc.cn/upload/20160323/05fb331419e74e7287261be199d7396e_th.jpg" alt></p><h4 id="欧几里德距离评价-1"><a href="#欧几里德距离评价-1" class="headerlink" title="欧几里德距离评价"></a>欧几里德距离评价</h4><p>　　在基于物品的协同过滤算法中，我们依然可以使用欧几里德距离评价来计算不同商品间的距离和关系。以下是计算公式。<br>　　通过欧几里德系数可以发现，商品间的距离和关系与前面散点图中的表现一致，商品1,3,4距离较近关系密切。商品2和商品5距离较近。<br><img src="http://img.mp.itc.cn/upload/20160323/37cfde91057c4657906884694d4d4820.jpg" alt></p><h4 id="皮尔逊相关度评价-1"><a href="#皮尔逊相关度评价-1" class="headerlink" title="皮尔逊相关度评价"></a>皮尔逊相关度评价</h4><p>　　我们选择使用皮尔逊相关度评价来计算多用户与多商品的关系计算。下面是5个用户对5件商品的评分表。我们通过这些评分计算出商品间的相关度。<br><img src="http://img.mp.itc.cn/upload/20160323/34c615fe8b874e3c809b0d569a1dcdc7.jpg" alt></p><h4 id="皮尔逊相关度计算公式"><a href="#皮尔逊相关度计算公式" class="headerlink" title="皮尔逊相关度计算公式"></a>皮尔逊相关度计算公式</h4><p>　　通过计算可以发现，商品1&amp;2，商品3&amp;4，商品3&amp;5和商品4&amp;5相似度较高。下一步我们可以依据这些商品间的相关度对用户进行商品推荐。<br><img src="http://img.mp.itc.cn/upload/20160323/751c71bacc4e40318aa6fe28cdd377e1.jpg" alt></p><h3 id="为用户提供基于相似物品的推荐"><a href="#为用户提供基于相似物品的推荐" class="headerlink" title="为用户提供基于相似物品的推荐"></a>为用户提供基于相似物品的推荐</h3><p>　　这里我们遇到了和基于用户进行商品推荐相同的问题，当需要对用户C基于商品3推荐商品时，需要一张新的商品与已有商品间的相似度列表。在前面的相似度计算中，商品3与商品4和商品5相似度较高，因此我们计算并获得了商品4,5与其他商品的相似度列表。<br><img src="http://img.mp.itc.cn/upload/20160323/1cce336ab2a745f4a83b0a0ef1420134.jpg" alt></p><p>　　以下是通过计算获得的新商品与已有商品间的相似度数据。<br><img src="http://img.mp.itc.cn/upload/20160323/1446ce301bba4a62a5bd4d7a76b548ea.jpg" alt></p><h4 id="加权排序推荐-1"><a href="#加权排序推荐-1" class="headerlink" title="加权排序推荐"></a>加权排序推荐</h4><p>　　这里是用户C已经购买过的商品4,5与新商品A,B,C直接的相似程度。我们将用户C对商品4,5的评分作为权重。对商品A,B,C进行加权排序。用户C评分较高并且与之相似度较高的商品被优先推荐。<br><img src="http://img.mp.itc.cn/upload/20160323/b25d8be4a3d14c43924d0045f56fb6a0.jpg" alt></p><h2 id="基于物品的协同过滤算法详解"><a href="#基于物品的协同过滤算法详解" class="headerlink" title="基于物品的协同过滤算法详解"></a>基于物品的协同过滤算法详解</h2><p>　　“Item-Based Collaborative Filtering Recommendation Algorithms”这篇是推荐领域比较经典的论文，现在很多流行的推荐算法都是在这篇论文提出的算法的基础上进行改进的。</p><h3 id="协同过滤算法描述"><a href="#协同过滤算法描述" class="headerlink" title="协同过滤算法描述"></a>协同过滤算法描述</h3><p>　　推荐系统应用数据分析技术，找出用户最可能喜欢的东西推荐给用户，现在很多电子商务网站都有这个应用。目前用的比较多、比较成熟的推荐算法是协同过滤（Collaborative Filtering，简称CF）推荐算法，CF的基本思想是根据用户之前的喜好以及其他兴趣相近的用户的选择来给用户推荐物品。<br><img src="http://hi.csdn.net/attachment/201203/16/0_1331909690XUpI.gif" alt><br>　　如图1所示，在CF中，用m×n的矩阵表示用户对物品的喜好情况，一般用打分表示用户对物品的喜好程度，分数越高表示越喜欢这个物品，0表示没有买过该物品。图中行表示一个用户，列表示一个物品，Uij表示用户i对物品j的打分情况。CF分为两个过程，一个为预测过程，另一个为推荐过程。预测过程是预测用户对没有购买过的物品的可能打分值，推荐是根据预测阶段的结果推荐用户最可能喜欢的一个或Top-N个物品。</p><h3 id="User-based算法与Item-based算法对比"><a href="#User-based算法与Item-based算法对比" class="headerlink" title="User-based算法与Item-based算法对比"></a>User-based算法与Item-based算法对比</h3><p>　　CF算法分为两大类，一类为基于memory的（Memory-based），另一类为基于Model的（Model-based），User-based和Item-based算法均属于Memory-based类型，具体细分类可以参考wikipedia的说明。<br>　　User-based的基本思想是如果用户A喜欢物品a，用户B喜欢物品a、b、c，用户C喜欢a和c，那么认为用户A与用户B和C相似，因为他们都喜欢a，而喜欢a的用户同时也喜欢c，所以把c推荐给用户A。该算法用最近邻居（nearest-neighbor）算法找出一个用户的邻居集合，该集合的用户和该用户有相似的喜好，算法根据邻居的偏好对该用户进行预测。<br>　　User-based算法存在两个重大问题：<br>   1.数据稀疏性。一个大型的电子商务推荐系统一般有非常多的物品，用户可能买的其中不到1%的物品，不同用户之间买的物品重叠性较低，导致算法无法找到一个用户的邻居，即偏好相似的用户。<br>   2.算法扩展性。最近邻居算法的计算量随着用户和物品数量的增加而增加，不适合数据量大的情况使用。<br>   Iterm-based的基本思想是预先根据所有用户的历史偏好数据计算物品之间的相似性，然后把与用户喜欢的物品相类似的物品推荐给用户。还是以之前的例子为例，可以知道物品a和c非常相似，因为喜欢a的用户同时也喜欢c，而用户A喜欢a，所以把c推荐给用户A。<br>   因为物品直接的相似性相对比较固定，所以可以预先在线下计算好不同物品之间的相似度，把结果存在表中，当推荐时进行查表，计算用户可能的打分值，可以同时解决上面两个问题。</p><h3 id="Item-based算法详细过程"><a href="#Item-based算法详细过程" class="headerlink" title="Item-based算法详细过程"></a>Item-based算法详细过程</h3><h4 id="相似度计算"><a href="#相似度计算" class="headerlink" title="相似度计算"></a>相似度计算</h4><p>Item-based算法首选计算物品之间的相似度，计算相似度的方法有以下几种：<br>　　1. 基于余弦（Cosine-based）的相似度计算，通过计算两个向量之间的夹角余弦值来计算物品之间的相似性，公式如下：<br><img src="http://hi.csdn.net/attachment/201203/16/0_13319134083G6A.gif" alt><br>　　其中分子为两个向量的内积，即两个向量相同位置的数字相乘。</p><p>　　2. 基于关联（Correlation-based）的相似度计算，计算两个向量之间的Pearson-r关联度，公式如下：<br><img src="http://hi.csdn.net/attachment/201203/16/0_1331913734Yw3C.gif" alt><br>　　其中<img src="http://hi.csdn.net/attachment/201203/16/0_1331913896gqEy.gif" alt><br>表示用户u对物品i的打分，<img src="http://hi.csdn.net/attachment/201203/16/0_1331913995ssJ8.gif" alt><br>表示第i个物品打分的平均值。</p><p>　　3. 调整的余弦（Adjusted Cosine）相似度计算，由于基于余弦的相似度计算没有考虑不同用户的打分情况，可能有的用户偏向于给高分，而有的用户偏向于给低分，该方法通过减去用户打分的平均值消除不同用户打分习惯的影响，公式如下：<br><img src="http://hi.csdn.net/attachment/201203/16/0_1331914462fZRZ.gif" alt><br>　　其中<img src="http://hi.csdn.net/attachment/201203/16/0_1331914514d5v5.gif" alt><br>表示用户u打分的平均值。</p><h4 id="预测值计算"><a href="#预测值计算" class="headerlink" title="预测值计算"></a>预测值计算</h4><p>根据之前算好的物品之间的相似度，接下来对用户未打分的物品进行预测，有两种预测方法：<br>　　1. 加权求和<br>　　用对用户u已打分的物品的分数进行加权求和，权值为各个物品与物品i的相似度，然后对所有物品相似度的和求平均，计算得到用户u对物品i打分，公式如下：<br><img src="http://hi.csdn.net/attachment/201203/16/0_1331915115duPj.gif" alt><br>　　其中<img src="http://hi.csdn.net/attachment/201203/16/0_1331915254jtLi.gif" alt><br>为物品i与物品N的相似度，<img src="http://hi.csdn.net/attachment/201203/16/0_13319153254qEB.gif" alt><br>为用户u对物品N的打分。</p><p>　　2. 回归<br>　　和上面加权求和的方法类似，但回归的方法不直接使用相似物品N的打分值<img src="http://hi.csdn.net/attachment/201203/16/0_13319153254qEB.gif" alt><br>　　因为用余弦法或Pearson关联法计算相似度时存在一个误区，即两个打分向量可能相距比较远（欧氏距离），但有可能有很高的相似度。因为不同用户的打分习惯不同，有的偏向打高分，有的偏向打低分。如果两个用户都喜欢一样的物品，因为打分习惯不同，他们的欧式距离可能比较远，但他们应该有较高的相似度。在这种情况下用户原始的相似物品的打分值进行计算会造成糟糕的预测结果。通过用线性回归的方式重新估算一个新的<img src="http://hi.csdn.net/attachment/201203/16/0_13319153254qEB.gif" alt><br>值，运用上面同样的方法进行预测。重新计算<img src="http://hi.csdn.net/attachment/201203/16/0_13319153254qEB.gif" alt><br>的方法如下：<br><img src="http://hi.csdn.net/attachment/201203/16/0_1331916402q0Ck.gif" alt><br>　　其中物品N是物品i的相似物品，<img src="http://hi.csdn.net/attachment/201203/16/0_1331916843OA66.gif" alt><br>和<img src="http://hi.csdn.net/attachment/201203/16/0_133191685681a8.gif" alt><br>通过对物品N和i的打分向量进行线性回归计算得到，<img src="http://hi.csdn.net/attachment/201203/16/0_1331916970228E.gif" alt><br>为回归模型的误差。具体怎么进行线性回归文章里面没有说明，需要查阅另外的相关文献。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>　　作者通过实验对比结果得出结论：1. Item-based算法的预测结果比User-based算法的质量要高一点。2. 由于Item-based算法可以预先计算好物品的相似度，所以在线的预测性能要比User-based算法的高。3. 用物品的一个小部分子集也可以得到高质量的预测结果。</p>]]></content>
      
      
      <categories>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
